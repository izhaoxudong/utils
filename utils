#include "general.h"

/**
 * @author zxd
 * @version v1.0.0
 * @date 2021年10月13日
 * @brief 16进制字符串转16进制字节数组
 * @param u8 * dest 转换后存放的指针
 * @param u8 * src 源串指针
 * @return u8 dest_len 转换后字节数组的长度
**/
void hexStrToByteArr(u8 * dest, u8 * src, u16 dest_len) {
    u16 i = 0;
    for(i = 0; i < dest_len; i++) {
        dest[i] = (((src[i<<1] > 0x39 ? src[i<<1] - 0x37 : src[i<<1] - 0x30) << 4) & 0xF0) + ((src[(i<<1)+1] > 0x39 ? src[(i<<1)+1] - 0x37 : src[(i<<1)+1] - 0x30) & 0x0F);
    }
}

/**
 * @author zxd
 * @version v1.0.0
 * @date 2021年10月13日
 * @brief 0~65535数字转16进制字符串
 * @param void
**/
void ushortToHexStr(u8 * dest, u16 num) {
    dest[0] = ((num & 0xF000) >> 12) < 10 ? ((num & 0xF000) >> 12) + 0x30 : ((num & 0xF000) >> 12) + 0x37;
    dest[1] = ((num & 0x0F00) >> 8) < 10 ? ((num & 0x0F00) >> 8) + 0x30 : ((num & 0x0F00) >> 8) + 0x37;
    dest[2] = ((num & 0x00F0) >> 4) < 10 ? ((num & 0x00F0) >> 4) + 0x30 : ((num & 0x00F0) >> 4) + 0x37;
    dest[3] = (num & 0x000F) < 10 ? (num & 0x000F) + 0x30 : (num & 0x000F) + 0x37;
}

/**
 * @author zxd
 * @version v1.0.0
 * @date 2021年10月13日
 * @brief 0~255数字转16进制字符串
 * @param void
**/
void ucharToHexStr(u8 * dest, u8 num) {
    u8 tenbit = 0;
    tenbit = num >> 4;
    dest[0] = (tenbit > 9 && tenbit < 16) ? tenbit + 0x37 : tenbit + 0x30;
    tenbit = num % 16;
    dest[1] = (tenbit > 9 && tenbit < 16) ? tenbit + 0x37 : tenbit + 0x30;
}

/**
 * @author zxd
 * @version v1.0.0
 * @date 2021年10月13日
 * @brief 计算字符串长度
 * @param u8 * src 待计算长度的字符串指针/无符号char类型字符数组
 * @return u16(stc中最大65535) 字符串长度
**/
u16 str_len(u8 * src) {
    u16 ans = 0;
    while(src[ans] != 0x00) {
        ans++;
    }
    return ans;
}

/**
 * @author zxd
 * @version v1.0.0
 * @date 2021年10月13日
 * @brief 0~65535数字转10进制字符串
 * @param void
**/
void ushortToDecStr(u8 * dest, u16 num) {
    
    u16 remainder = 0;
    u8 i = 0, j = 0;

    do{
        remainder = num % 10;
        dest[i++] = remainder + 0x30;
        num = num / 10;
    } while (num);

    i = 0, j = str_len(dest) - 1;
    while(i < j) {
        remainder = dest[i];
        dest[i] = dest[j];
        dest[j] = remainder;
        i++;
        j--;
    }

}

/**
 * @author zxd
 * @version v1.0.0
 * @date 2021年10月13日
 * @brief 手动实现strstr()函数
 * @param void
**/
int td_strStr(char* haystack, int h_len, char* needle, int n_len) {
    
    int i = 0, j = 0;
    u8 pi[NEXT_ARR_LEN] = {0};
    
    if(n_len == 0) {
        return 0;
    }
    
    for(i = 1, j = 0; i < n_len; i++) {
        
        while(j > 0 && needle[i] != needle[j]) {
            j = pi[j - 1];
        }
        
        if(needle[i] == needle[j]) {
            j++;
        }
        pi[i] = j;
    }
    
    for(i = 0, j = 0; i < h_len; i++) {
        
        while(j > 0 && haystack[i] != needle[j]) {
            j = pi[j - 1];
        }
        
        if(haystack[i] == needle[j]) {
            j++;
        }
        
        if(j == n_len) {
            return i - n_len + 1;
        }
    }
    
    return -1;
    
}
